name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

    runs-on: ubuntu-latest
    environment: dvp

    defaults:
      run:
        shell: bash
        working-directory: "./01-infra/azure"

    steps:
    - uses: hashicorp/setup-terraform@v3
    - uses: actions/checkout@v4

    - name: 'Terraform Format'
      id: fmt
      run: terraform fmt -check -recursive -list=true
      continue-on-error: true  
        
    - name: 'Terraform Init'
      id : init
      run : terraform init -input=false

    - name: 'Terraform Validate'
      id : validate
      run : terraform validate

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master'
      id : apply
      run : terraform apply -auto-approve -var-file="variables/dvp.tfvars"
      env:
        TF_VAR_sql_admin_password : ${{ secrets.VAR_SQL_ADMIN_PASSWORD }}

    - name: Terraform Output
      id : output
      run : | 
        terraform_outputs=$(terraform output -json)

        for key in $(echo $terraform_outputs | jq -r 'keys[]'); do
        value=$(echo $terraform_outputs | jq -r ".\"$key\".value")
        echo "$key=$value" >> $GITHUB_ENV
        done

    - uses: qetza/replacetokens-action@v1
      name: 'Replace tokens'
      with:
        sources: '**/*.csv;**/*.json'  
        variables: '[${{ toJSON(vars) }},${{ toJSON(secrets) }}]' 
        no-telemetry: 'true'
        recursive: 'true'
        log-level: 'debug'
    
    - name : Az login
      id : login
      uses: azure/login@v2
      with:
        enable-AzPSSession: true 
        creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}' 


    - name: 'Install requirements'
      id : requirementsinstall
      shell : pwsh
      run: pwsh ../../01-infra/devops/requirements.ps1


    - name: 'Deploy secrets'
      id : secretsdeploy
      shell : pwsh
      env: 
       kvname:  ${{ env.kvname }}
      run: pwsh ../../01-infra/devops/keyvault/deploy_secrets.ps1 ./secrets/secrets.csv


    - name: 'Deploy ADF'
      id : adfdeploy
      uses : azure/powershell@v2
      env: 
       adf_root: "./adf"
       rg_name:  ${{ env.rgname }}
       data_factory_name: ${{ env.adfname }}
       rg_location: ${{ env.rglocation }}
      with:
        inlineScript: ./01-infra/devops/adf/deploy_adf.ps1
        azPSVersion: "latest"

    - name: 'Zip Azure functions'
      id : zipfunc
      uses: vimtor/action-zip@v1.2
      with:
        files: ./src
        dest: affunctions.zip

    - name: my-artifact  
      id : uploadaf
      uses: actions/upload-artifact@v4
      with:  
        path: ${{ github.workspace }}/affunctions.zip

    - name: 'Deploy Functions'
      id : deployfunc
      uses : azure/powershell@v2
      env: 
       adf_root: "./adf"
       rg_name:  ${{ env.rgname }}
       data_factory_name: ${{ env.adfname }}
       rg_location: ${{ env.rglocation }}
      with:
        inlineScript: | 
          az functionapp deployment source config-zip -g ${{ env.rgname }} -n ${{ env.functionname }} --src "${{ github.workspace }}/affunctions.zip"
        azPSVersion: "latest"

   # - name: 'Run the Azure Functions action'
   #   uses: Azure/functions-action@v1
   #   id: deploy-to-function-app
   #   with:
   #     app-name: ${{ env.functionname }}
   #     package: './src' 



